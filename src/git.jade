extends layout/_layout

block content
  section
    h1 git運用ガイドライン

  section
    h2 ■ねらい
    ul
      .fragment gitでうまくやるための方針です。
      .fragment 主にメインラインパターンの説明です。

  section
    h2 ■バージョン管理ってなんだっけ？
    ul
      .fragment SCM→ソースコードマネージメント
      .fragment VCS→バージョン管理システム

  section
    h2 ■gitより昔のおさらい

  section
    h2 ■バージョン管理ツールがないと
    ul
      .fragment 変更前をコメントアウトして残すということが行われる

      .fragment きんじれい
      pre.fragment: code.hljs(data-trim contenteditable).
        // 上記対応により、位置にズレが生じたため、それのオフセット
        //2014.10.15 RO UPD ↓W連絡票-140821-高木04.xls
        //var thirdLevMenuLeftOffset = 5;
        var thirdLevMenuLeftOffset = 0;
        //2014.10.15 RO UPD ↑

      .fragment
        | たまにバージョン管理をしているのにやっているケースがある。
        br
        | (社内でもありました。)


  section
    h2 ■Revision Control System
    ul
      .fragment ・個人向け
      .fragment ・バージョン管理はファイル単位
      .fragment ・プロジェクト全体を管理するといった概念はない
      .fragment ・複数ユーザーの同時作業を想定していない
    h3.fragment ・いわゆるWindows標準の<br>「以前のバージョン」


  section
    h2 ■Concurrent Versions System
    ul
      .fragment ・CVSは元々、単一のファイルを対象としたバージョン管理ツールであるRCSの上に作られていた
      .fragment ・Windowsの履歴管理のように一つのファイルの履歴を管理することが目的
      .fragment ・ファイル名の変更削除、ディレクトリ名の変更削除をうまく扱えない
      .fragment ・異なる文字コード（JIS/SJIS/EUC）に対するサポートがない
      .fragment ・基本的に個々のファイルの履歴はわかるが、リポジトリの履歴は簡単には知ることができない

  section
    ul
      | ・バイナリーファイルの扱いが下手で、リポジトリサイズの増大につながる
      .fragment ・分散リポジトリをサポートしない。ネットワーク対応されていない
      .fragment ・アトミック・コミットをサポートしない。複数のファイルを同時にコミットした場合、CVSではそれぞれのファイルを一つずつコミットしたものとして扱うため、アトミック性を満たすことができない
      .fragment ・リリース用のタグ付けのためのExcel管理台帳が必要
      .fragment ・タグ付けするまでリリース可能なコードにならない


  section
    h2 ■Subversion
    ul
      .fragment ・CVSの問題点を解決すべく開発されたのがSubversion
      .fragment ・ディレクトリの移動や削除をサポートしている。ファイル名やソースツリーの構造が決まらないうちからバージョン管理できる
      .fragment ・リビジョン番号はソースツリー全体に対して振られ、誰かがソースツリーのどこかのファイルを更新する度に番号が増える(CVSではファイル毎にリビジョン番号がつけられている)
      .fragment ・作業ディレクトリ内に、最後にソースリポジトリと同期をとったときのファイルのコピーを持っているため、DIFFが高速にできる(ソースリポジトリにアクセスしない)

  section
    ul
      | ・ファイルの差分送信が効率よく行なわれるため、プアなネットワーク環境で利用したときに快適
      .fragment ・SSHによるソースリポジトリとの通信を標準でサポート。インターネット経由で利用してもセキュリティを容易に保てる
      .fragment ・WebDAVをバックエンドとして使うことができる。Apache HTTP ServerなどのWebDAVをサポートするHTTPサーバを経由して、WebDAVプロトコルを用いてSubversionサーバとSubversionクライアントが通信するという形態が使える


  section
    h2 ■SVNのダメな点(システム面)
    ul
      .fragment ・SVNのブランチは単なるファイルコピー
      .fragment ・ブランチを切ったあとのコミットの変更履歴しか残らない
      .fragment ・ブランチの流れがまったく見えない(どこから発生したのかもわからない)
      .fragment ・マージがうまくできない
      .fragment ・ブランチ同士をマージする気が見えない

  section
    h2 ■SVNのダメな点(運用面)
    ul
      .fragment ・一人のとき、少数人数ならうまくいく
      .fragment ・複数人になったらそうもいかない
      .fragment ・リソースコントロールでなんとかできるけど・・・
      .fragment ・「昇格モデル」を採用せざるをえない
      .fragment →リリースのたびにブランチを作り、作ったブランチから更にブランチを作る
      .fragment ・昇格モデルは、開発者にとってとても開発しづらい



  section
    h2 ■git
    ul
      .fragment ・分散型バージョン管理システム
      .fragment ・first commitは2005年12月21日（10年前）
      .fragment ・Initial revision of "git", the information manager from hell
      .fragment ・各ユーザのワーキングディレクトリに、全履歴を含んだリポジトリの完全な複製が作られる
      .fragment ・ネットワークにアクセスできないなどの理由で中心リポジトリにアクセスできない環境でも履歴の調査や変更の記録といった作業を行うことができる

  section
    ul
      | ・状態を記録する
      .fragment ・CVSは悪い見本
      .fragment ・必然的にCVSの上位互換であるSVNは悪いものである
      .fragment ・データ破壊に対する強力な抑止機能。データ破壊は、偶然によるものと意図的なものの両方を想定している


  section
    h3 ■構成管理パターン
    h4 (Software Configuration Management Patterns)
    ul
      .fragment ・ソースコードのバージョンや構成をどのように管理するか
      .fragment ・Stephen P. Berczuk氏とBrad Appleton氏がまとめたパターン(2006年10月)
      .fragment ・ソースコードのファイルの集まりである「コードライン」をどのように管理するかについて、全部で16種類のパターンを定義

  section
    img(src="./img/hyo01.jpg")

  section
    ul
      | ・すでにSVNでも実装されているものもある。
      .fragment ・SVNでできてない(できない)ものを説明
      .fragment ・メインライン
      .fragment ・リリースライン
      .fragment ・タスクブランチ


  section
    h2 ■メインライン
    ul
      .fragment ・コードラインの本流となる「メインライン」を決定し、ソース・ファイルを修正したら、必ず修正した部分をメインラインに戻す（マージする）こと
      .fragment ・ブランチのコードラインに修正を加え続けることを避ける
      .fragment ・そうしなければ，ブランチがいくつも出来上がり（ブランチの段構造）、コードラインを適切に管理できなくなる
      .fragment ・SVNではブランチを作成して戻すということが困難だった。
      .fragment ・適切なブランチ戦略の方法


  section
    h2 ■ブランチ戦略をしっかり定めないと・・・
    ul
      .fragment ・開発後、二次開発と運用が行われるケース
      .fragment ・二次開発では現行のブランチに
      .fragment ・運用はバグフィックスが行われる
      .fragment ・同じブランチに両方の改修を入れてしまうと二次開発の修正が入ってしまうためリリースができない。
      .fragment ・仕方ないので本番サーバーのソースを直接変更する。コミットし忘れる。次のリリース時にデグレ。


  section
    h2 ■ブランチ戦略をしっかり定めないと・・・その2
    ul
      .fragment ・保守ブランチと開発ブランチを2か月後マージ
      .fragment ・コンフリクトでまったく内容が違っていた
      .fragment ・リリース延期

  section
    h2 ■ブランチ戦略をしっかり定めないと・・・その3
    ul
      .fragment ・ブランチが乱立する(昇格モデルに近い)
      .fragment ・改修や機能追加をどこのブランチに入れればいいのかわからなくなる
      .fragment ・バージョン管理ツールを導入してるのにダメなパターン


  section
    h2 ■メインラインモデルによる構成管理
    ul
      .fragment リリース後のシステムは最低二つのバージョンのソフトウェアを維持する必要がある
      .fragment ・保守運用
      .fragment ・開発


  section
    h2 ■メインラインパターン基礎
    ul
      .fragment ・メインラインは常にビルドできる状態を保つ
      .fragment ・ブランチは必ずメインラインから作成する
      .fragment ・ブランチのブランチは作成せず、必ずメインラインから派生させる
      .fragment ・ブランチを作成したらなるべく早くメインラインに戻す

  section
    h4 ■A successfull git branching model(git-flow)
    ul
      .fragment master:タグ専用
      .fragment feature:新機能開発(大き目)。developから派生
      .fragment develop:軽微な開発＋featureをマージ
      .fragment release:リリースしてタグ打ち。developから派生&マージ
      .fragment hotfix:緊急なバグなどの修正。masterから派生。developとmasterに反映する
  
  section
    img(src="./img/sgbm.png" width="60%")

  section
    h2 ●メインラインパターン例1
    ul
      .fragment ＜Eggs＞
      .fragment
        | master:直コミット禁止
        br
        | design:制作向けブランチ。デザイン検証環境に自動的にデプロイされる
        br
        | feature:いわゆるタスクブランチ
        br
        | pre_release:タスクブランチをまとめる
        br
        | release:直コミット禁止

  section
    h2 ●メインラインパターン例2
    ul
      .fragment ＜ヌーラボ＞
      .fragment
        | master
        br
        | beta:検証環境に自動的にデプロイする。
        br
        | develop:開発ブランチ。タグ付けしてからリリースをこのブランチから行う。
        br
        | package-master:パッケージ版の開発を行うブランチ。ASPには入らない機能改修を行うのでmasterにはマージされない。
        br
        | feature:どのブランチでも行われる

  section
    h2 ●メインラインパターン例3
    ul
      .fragment ＜redmine＞(亜流)
      .fragment
        | master:開発はこちらでやり、リリースの際にチェリーピックする
        br
        | stable1
        br
        | stable2

  section
    h1 THEND



block script
